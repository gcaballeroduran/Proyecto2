using gold.structures.automaton.*
using gold.visualization.automaton.*

procedure main(args:String[]) begin
    lexer = createTransducer()
	 testLexer(lexer)
end
  
        

procedure testLexer(M:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
    	
	input = ""
		
		
		print "----------------------------"
		print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine() 



	while string != "EXIT" do
		
		
       
       while string.charAt(0) != '$' do
              input := input + string + " "
              string:=sc.nextLine()
       end
       
       result:=M.acceptsString(input)    
		tokenStream := M.getOutputString()
		
		print "The lexer did "+(result?"":"not ")+" accept the string."
		if result then print "Token Stream: "+ tokenStream end		

       print "----------------------------"
	
	   print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine() 

	end
print  "Good bye"
print  ""

end 

 


var names
  
function createTransducer():ITransducer begin
	// Lexer: reads a string with lower casae letters, digits, parenthesis, and spaces.
	// outputs a string of {'(',')','+','*','v','n'}

	
	Q:= {"E","EN","p","pu","F","FA","N","NO","t","tu","mo","M","B","I","E","P","R","V","n","RO","Err","A","AS","num","P","p2","n2"}
	
	Σ:=('0'‥'9') ∪ ('a' ‥ 'z') ∪ {'(',')',',','_',' ','\n','{','}','[',']',';'}  ∪ ('A' ‥ 'Z')
	Out:={'(',')',',','{','}','[',']','v','n',';','!'}  ∪ ('A' ‥ 'Z')
	q₀:="I"
	F:= {"I"}
	return 	GDeterministicTransducer(Q,Σ,Out,q₀,F,δ,g,h)
end

function δ(q,σ) begin
	if (q = "Err") then return "Err"
	//ROBOT_R
	elseif q="I" and σ='R' then return "R"
	elseif q="R" and σ='O' then return "RO"
	elseif q="RO" and σ ∈ ('A' ‥ 'Z') then return "RO"
	elseif q="RO" and σ = '_' then return "RO"
	//VARS
   elseif q="I" and σ='V' then return "V"
   elseif q="V" and σ ∈ ('A' ‥ 'Z') then return "V"
   	elseif q="V" and σ =' ' then return "E"
   	// a, b
   	elseif q="E" and σ ∈ ('a' ‥ 'z') then return "n"
   	elseif q="n" and σ = ' ' then return "n"
   	//BEGIN 
   	 elseif q="I" and σ = 'B' then return "B"
    elseif q="B" and σ ∈ ('A' ‥ 'Z') then return "B"
   	// assign
    elseif q="I" and σ = 'a' then return "A"
    elseif q="A" and σ = 's' then return "AS"
    elseif q="AS" and σ ∈ ('a' ‥ 'z') then return "AS"
    // (('a' ‥ 'z') ,number)
    elseif q="I" and σ ='(' then return "P"
    elseif q="P" and σ =' ' then return "P"
    elseif q="P" and σ ∈('a' ‥ 'z') then return "n"
    elseif q="I" and σ = ',' then return "I"
    elseif q="I" and σ ∈ ('0' ‥ '9') then return "num"
   // move
    elseif q="I" and σ = 'm' then return "M"
    elseif q="M" and σ = 'o' then return "mo"
    elseif q="mo" and σ ∈ ('a' ‥ 'z') then return "mo"
   // turn 
    elseif q="I" and σ = 't' then return "t"
    elseif q="t" and σ = 'u' then return "tu"
    elseif q="tu" and σ ∈ ('a' ‥ 'z') then return "tu"
    // not
    elseif q="I" and σ = 'n' then return "N"
    elseif q="N" and σ = 'o' then return "NO"
    elseif q="NO" and σ ∈ ('a' ‥ 'z') then return "NO"
    elseif q="NO" and σ ='(' then return "NO"
    	
    // face 
    elseif q="I" and σ = 'f' then return "F"
    elseif q="F" and σ = 'a' then return "FA"
    elseif q="FA" and σ ∈ ('a' ‥ 'z') then return "FA"
    	
    // put 
    elseif q="I" and σ = 'p' then return "p"
    elseif q="p" and σ = 'u' then return "pu"
    elseif q="pu" and σ ∈ ('a' ‥ 'z') then return "pu"
    
    //END
    elseif q="I" and σ = 'E' then return "E"
    elseif q="E" and σ ∈ ('A' ‥ 'Z') then return "EN"
    	
    
    else  return "I"
    
    end	
end 



function g(q) begin
	return λ
end

function h(q,σ) begin
	var s: String
	s := λ

	if q ∉ {"Err"} and σ ∈ {'(',')',',',' ','\n',';','{','}','[',']'} then
		if σ ∉ {' ','\n'} and q ∉ {"num"}then  s=String.valueOf(σ) return s
		end
	if q=="RO" then s = "R" return s
   	elseif q=="V" then s = "V" return s
    elseif q=="n" then  s = "n"return s
    elseif q=="AS" then s = "A"return s 
    elseif q=="num" then s = "v"+")"return s 
    elseif q=="B" then s = "B" return s 
    elseif q=="mo" then s = "M" return s 
    elseif q=="tu" then s = "T" return s 
    elseif q=="NO" then s = "!" return s 
    elseif q=="FA" then s = "F" return s 
    elseif q=="pu" then s = "P" return s 
     elseif q=="EN" then s = "E" return s 
    else return  λ
 	end
	else return  λ
	end
end